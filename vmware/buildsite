#!/bin/bash

if [[ ! -z ${1} ]]
then
  SERVERS=${1}
else
  SERVERS=$(grep -v "^#" site.data | sed -e "s/ //g")
fi

# read in the two passwords for the single.tf file
# one for vcenter password
# and one for the template password

read -p "vCenter Password: " -s VCENTER
if [[ -z ${VCENTER} ]]
then
  echo "Password required."
  exit 1
fi
echo ""

read -p "Template Password: " -s TEMPLATE
if [[ -z ${TEMPLATE} ]]
then
  echo "Password required."
  exit 1
fi
echo ""

DEBUG='yes'
DEBUG='no'

# set the current location so we know where to return to
HERE=$(pwd)

for i in ${SERVERS}
do
  SITENAME=$(    echo $i | cut -f1 -d,)
  SITEINIT=$(    echo $i | cut -f2 -d,)
  ETH0_GATEWAY=$(echo $i | cut -f3 -d,)
  ETH0_NETWORK=$(echo $i | cut -f5 -d,)
  SITEPOST=$(    echo $i | cut -f7 -d,)

  echo "Building site: ${SITENAME}"

# return to the default directory
  cd ${HERE}

# create the directory first.
  if [[ ! -d ${SITENAME} ]]
  then
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Create ${SITENAME}"
    fi
    mkdir -p ${SITENAME}
  fi

# make the modules directory
  if [[ ! -d modules ]]
  then
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Create modules"
    fi
    mkdir -p modules
  fi

# just initializing so copying more than once, no biggie.
  if [[ $DEBUG = 'yes' ]]
  then
    echo "Copy templates/single.tf modules/"
  fi
  sed -e "s/VCENTER/${VCENTER}/g" \
      -e "s/TEMPLATE/${TEMPLATE}/g" \
         templates/single.tf > modules/single.tf

# copy the initialize script which initializes a site
  if [[ $DEBUG = 'yes' ]]
  then
    echo "Copy templates/initialize ${SITENAME}/"
  fi
  cp templates/initialize ${SITENAME}/

# copy the teardown script which tears down a site
  if [[ $DEBUG = 'yes' ]]
  then
    echo "Copy templates/teardown ${SITENAME}/"
  fi
  cp templates/teardown ${SITENAME}/

# make the appropriate directories
# create the data file in the new directory
# boulder/[application]/[servers]
  if [[ $DEBUG = 'yes' ]]
  then
    echo "Create the appropriate directories"
  fi
  for j in $(grep "${SITEINIT}" server.data | sed -e "s/ //g")
  do
    ENVIRONMENT=$(   echo ${j} | awk -F, '{print $2}')
    SITEPATH=$(      echo ${j} | awk -F, '{print $2"/"$4"/"$5"/"$6}')
    SERVERNAME=$(    echo ${j} | awk -F, '{print $6}')
    IPADDRESS=$(     echo ${j} | awk -F, '{print $8}')
    NETMASK=$(       echo ${j} | awk -F, '{print $9}')

    cd ${HERE}

    if [[ ! -d ${SITEPATH} ]]
    then
      mkdir -p ${SITEPATH}
    fi

    if [[ ${ENVIRONMENT} = 'boulder' ]]
    then
      DOMAIN="dev.internal.pri"
    elif [[ ${ENVIRONMENT} = 'cabo' ]]
    then
      DOMAIN="qa.internal.pri"
    elif [[ ${ENVIRONMENT} = 'tatooine' ]]
    then
      DOMAIN="stage.internal.pri"
    elif [[ ${ENVIRONMENT} = 'longmont' ]]
    then
      DOMAIN="internal.pri"
    elif [[ ${ENVIRONMENT} = 'nederland' ]]
    then
      DOMAIN="home.internal.pri"
    fi

    sed -e "s/HOSTNAME/${SERVERNAME}/g" \
        -e "s/DOMAIN/${DOMAIN}/g" \
        -e "s/IPADDRESS/${IPADDRESS}/g" \
        -e "s/NETMASK/${NETMASK}/g" \
        -e "s/GATEWAY/${ETH0_GATEWAY}/g" \
        templates/script.sh > ${SITEPATH}/script.sh

    SEARCH=$(echo ${j} | awk -F, '{print $2","$3","$4","$5","$6}')

# create the server.data file maketf uses to create main.tf
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Create ${SITEPATH}/server.data"
    fi
    sed -e "s/ //g" server.data | grep ${SEARCH} > ${SITEPATH}/server.data

# and now build the script
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Build the ${SITEPATH}/maketf script"
    fi
    sed -e "s/SITENAME/${SITENAME}/g" \
        -e "s/SITENET/${SITENET}/g" \
        templates/maketf > ${SITEPATH}/maketf

# set to execute
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Set ${SITEPATH}/maketf to execute"
    fi
    chmod 755 ${SITEPATH}/maketf

# now we build the environment. It should JUST WORK!
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Go to ${SITEPATH}"
    fi
    cd ${SITEPATH}

# make the terraform file
    if [[ $DEBUG = 'yes' ]]
    then
      echo "Run maketf"
    fi
    ./maketf > main.tf

    if [[ $DEBUG = 'yes' ]]
    then
      echo "Delete old files"
    fi
    rm maketf
    rm server.data

    if [[ $DEBUG = 'yes' ]]
    then
      echo "Pretty printing tf files"
    fi
    terraform fmt > /dev/null

  done

  if [[ $DEBUG = 'yes' ]]
  then
    echo "Done with ${SITENAME}"
  fi

done

